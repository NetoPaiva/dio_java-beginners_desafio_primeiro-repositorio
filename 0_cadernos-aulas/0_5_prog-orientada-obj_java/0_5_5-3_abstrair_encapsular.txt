##################################################################
#                                                                #
#                        _potenciaTech                           #
#                                                                #
#                        _iFood                                  #
#                                                                #
#                        _javaBeginners                          #
#                                                                #
#                        _bootcamp_by_dio                        #
#                                                                #
##################################################################

------------------------------------------------------------------
                        diario_de_bordo
------------------------------------------------------------------

05_java__programacao_orientada_objeto
=====================================

    05_1_prog_orientada_objeto
    05_2_collections_java
    05_3_debugging_java
    05_4_excecoes_java
    05_5_java_oop__abstrair_bootcamp

------------------------------------------------------------------

05_5_java_oop__abstrair_bootcamp
==================================

    Camila Cavalcante
        Tech Teacher
        DIO

------------------------------------------------------------------
    05_5_1_apresenta_desafio-projeto
    05_5_2_configura_ambiente
    05_5_3_abstrair_encapsular
    05_5_4_herança_polimorfismo
    05_5_5_concluir_classes_domínio
    05_5_6_interligar_classes_domiínio
    05_5_7_descrição_desafio
    05_5_8_link_github
    05_5_9_informações_desafio
------------------------------------------------------------------

    Abstrair e Encapsular
    =====================

        Começar a construir as classes de domínio

    1   Criar pacotes
    2   Criar classe main
    3   Criar classes do domínio
    4   Modelar as classes de domínio
    5   Instanciar os objetos
    6   Atribuir valores aos objetos
    7   Criar Construtor vazio
    8   Códigos até este ponto
    9   Saída do programa até aqui (Run)
    10  Recapitulando

------------------------------------------------------------------

1   Criar pacotes
=================

    - Os pacotes servem para
        - organizar projeto
        - separar as responsabilidades de cada grupo de classe

    - no IntelliJ
        - dentro de "src"
            - botão direito mouse
                - New / Package
                    - nomear pacote
                        - br.com.dio.desafio
        - dentro do novo pacote
            - criar outro pacote
                - br.com.dio.desafio.dominio


2   Criar classe Main
=====================

    - dentro de src
        - new java class
            - nomear como Main

    - na aba de edição do arquivo
        - criar o método main
            - psvm + enter
                - public static void main(String[] args) {}


3   Criar classes do domínio
============================

    - pertencem ao domínio da aplicação

    - dentro do pacote
        - br.com.dio.desafio.dominio
            - new java class

        - Bootcamp
        - Dev
        - Curso
        - Mentoria

    - Curso e Mentoria
        - dentro do pacote "br.com.dio.desafio.dominio"
            - java class
                - nomear
                    - Curso
            - java class
                - nomear
                    - Mentoria


4   Modelar as classes de domínio
=================================

    - editar as classes Curso / Mentoria
        - incluir
            - atributos
            - modificadores de acesso
            - métodos

    - Curso
        - incluir os atributos
            - título
            - descrição
            - carga horária

    - Mentoria
        - incluir atributos
            - título
            - descrição
            - data


    - Atributos
    -----------

        - na aba esquerda
            - seleciona a classe a ser modelada

        - na aba de edição do arquivo

        - Curso
            - incluir os atributos
                - String titulo;
                - String descrição;
                - int cargaHoraria;

        - Mentoria
            - incluir os atributos
                - String titulo;
                - String descrição;
                - LocalDate data;
                    - obs.:
                        - classe que trabalha com datas
                            - também a LocalDateTime


    - Modificar de acesso
    ---------------------

        - nas duas classes (Mentoria e Curso)
            - private String titulo;
            - private String descrição;
            - private int cargaHoraria; (em curso)
            - private LocalDate data;   (em mentoria)

        - modificadores de acesso
            - são palavras reservadas
            - private
                - só esta classe tem acesso
            - protected
                - só esta classe e as classes filhas têm acesso
            - public
                - qualquer classe tem acesso
                - este é o tipo de acesso padrão
                    - se não declarar nenhum tipo de acesso
                    - a classe será do tipo public
            - boa prática
                - utilizar private como modificar de acesso


        - Métodos
        ---------
            - get
            - set
                - para trabalhar com atributos nas classes

            - atalho ALT + Insert
                - aparece janela Generate
                    - selecionar
                        - Getter and Setter
                - aparece janela Select Fields to Generate
                    - selecionar os atributos
                        - titulo:String
                        - descricao:String
                        - cargaHoraria:int (em curso)
                        - data:LocalDate   (em mentoria)

            - criar toString
                - generate toString
                    (ALT + Insert)


5   Instanciar os objetos
=========================

    - Curso
    - Mentoria
        - é a partir da palavra reservada "new"
            - como se a classe fosse a planta da casa
              e o objeto é a casa construída


    - na classe Main
        - atalho (ctrl N) digitar main e enter
            - abre o arquivo da classe Main

        - iniciar o objeto "Curso"
            - Curso curso1 = new Curso();
            - Curso curso2 = new Curso();

        - iniciar o objeto "Mentoria"
            - Mentoria mentoria = new Mentoria();

        - imprimir para verificar se foi criado
            - criar 3 métodos print
                - atalho sout + enter
                    - System.out.println();
            - incluir dentro dos parênteses do método
                - System.out.println(curso1);
                - System.out.println(curso2);
                - System.out.println(mentoria);


6   Atribuir valores aos objetos
================================

    - método set
        - Curso
            - curso1.setTitulo("curso java");
            - curso1.setDescricao("descrição curso java");
            - curso1.setCargaHoraria(8);

        - Mentoria
            - mentoria.setTitulo("mentoria java");
            - mentoria.setDescricao("descrição mentoria java");
            - mentoria.setData(LocalDate.now());

            - na configuração da Data
                - chamar a classe java "LocalDate - java.time"
                    - dentro dos parênteses
                        - mentoria.setData(LocalDate);
                - adicionar método now
                    - dentro dos parênteses e após LocalDate
                        - mentoria.setData(LocalDate.now());
                            - a data será atribuida automaticamente
                              quando este objeto for criado


7   Criar Construtor vazio
==========================

    - nos arquivos
        - Curso.java
        - Mentoria.java

        - posiciona o cursor abaixo dos atributos da classe
            - private int cargaHoraria
        - atalho ALT + Insert
            - Constructor
                - seleciona o pacote ...dominio.Curso
                - OK
        - cria os construtores
            - public Curso() { }
            - public Mentoria() { }



8   Códigos até este ponto
==========================

    código Main.java
    ----------------

        import br.com.dio.desafio.dominio.Curso;
        import br.com.dio.desafio.dominio.Mentoria;

        import java.time.LocalDate;

        public class Main {
            public static void main(String[] args) {

                Curso curso1 = new Curso();

                curso1.setTitulo("curso java");
                curso1.setDescricao("descrição curso java");
                curso1.setCargaHoraria(8);

                Curso curso2 = new Curso();

                curso2.setTitulo("curso poo");
                curso2.setDescricao("descrição curso poo");
                curso2.setCargaHoraria(6);

                Mentoria mentoria = new Mentoria();

                mentoria.setTitulo("mentoria Java");
                mentoria.setDescricao("descrição mentoria java");
                mentoria.setData(LocalDate.now());

                System.out.println(curso1);
                System.out.println(curso2);
                System.out.println(mentoria);
            }

        }


    código Curso.java
    -----------------

        package br.com.dio.desafio.dominio;

        public class Curso {
            private String titulo;
            private String descricao;
            private int cargaHoraria;

            public Curso() {
            }

            public String getTitulo() {
                return titulo;
            }

            public void setTitulo(String titulo) {
                this.titulo = titulo;
            }

            public String getDescricao() {
                return descricao;
            }

            public void setDescricao(String descricao) {
                this.descricao = descricao;
            }

            public int getCargaHoraria() {
                return cargaHoraria;
            }

            public void setCargaHoraria(int cargaHoraria) {
                this.cargaHoraria = cargaHoraria;
            }

            @Override
            public String toString() {
                return "Curso{" +
                        "titulo='" + titulo + '\'' +
                        ", descricao='" + descricao + '\'' +
                        ", cargaHoraria=" + cargaHoraria +
                        '}';
            }
        }


    código Mentoria.java
    --------------------

        package br.com.dio.desafio.dominio;

        import java.time.LocalDate;

        public class Mentoria {
            private String titulo;
            private String descricao;
            private LocalDate data;

            public Mentoria() {
            }

            public String getTitulo() {
                return titulo;
            }

            public void setTitulo(String titulo) {
                this.titulo = titulo;
            }

            public String getDescricao() {
                return descricao;
            }

            public void setDescricao(String descricao) {
                this.descricao = descricao;
            }

            public LocalDate getData() {
                return data;
            }

            public void setData(LocalDate data) {
                this.data = data;
            }

            @Override
            public String toString() {
                return "Mentoria{" +
                        "titulo='" + titulo + '\'' +
                        ", descricao='" + descricao + '\'' +
                        ", data=" + data +
                        '}';
            }
        }



9   Saída do programa até aqui (Run)
====================================

    /usr/lib/jvm/java-1.11.0-openjdk-amd64/bin/java 
    -javaagent:/usr/lib/idea-IC-222.4345.14/lib/idea_rt.jar=37553:
    /usr/lib/idea-IC-222.4345.14/bin 
    -Dfile.encoding=UTF-8 
    -classpath 
    /home/emcasa/java_beginners/0_repositorio-git
    /dio_java-beginners_desafio_abstrair-bootcamp
    /desafio-bootcamp_dio/out/production/desafio-bootcamp_dio
    Main

    Curso{
        titulo='curso java', 
        descricao='descrição curso java', 
        cargaHoraria=8
     }

    Curso{
        titulo='curso poo', 
        descricao='descrição curso poo', 
        cargaHoraria=6
    }

    Mentoria{
        titulo='mentoria Java', 
        descricao='descrição mentoria java', 
        data=2022-11-08
    }

    Process finished with exit code 0


    -----------------------------------------------------


10  Recapitulando
=================

        - criar classes
            - curso
            - mentoria

        - criar objetos dessas classes
            - dentro da classe Main
                - curso1
                - curso2
                - mentoria

        - trabalhando conceito de abstração
            - a partir de um problema
                - subdivide problema
                    - constroi classes
                        - instanciadas com objetos

        - conceito de encapsulamento
            - classes
                - modificador de acesso
                    - public
            - atributos
                - modificador de acesso
                    - private
                        - só pode modificar com os métodos
                            - get
                            - set
                            - ou novo método

        - próxima etapa
            - evitar repetição de código em Curso e Mentoria
                - String titulo
                - String descricao
                - calcularXP
            - boa prática para solucionar repetição
                - refatorar o código
                    - rever
                    - corrigir
                    - simplificar
                    - melhorar


------------------------------------------------------------------
